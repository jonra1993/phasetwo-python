# coding: utf-8

"""
    Phase Two Admin REST API

    This is a REST API reference for the Phase Two Keycloak custom resources. These are extensions to the standard [Keycloak Admin REST API](https://www.keycloak.org/docs-api/23.0.6/rest-api/index.html).  ### Base URI format Paths specified in the documentation are relative to the the base URI. - Format: `https://<host>:<port>/auth/realms` - Example: `https://app.phasetwo.io/auth/realms`  ### Authentication Authentication is achieved by using the `Authentication: Bearer <token>` header in all requests. This is either the access token received from a normal authentication, or by a request directly to the OpenID Connect token endpoint.  It is recommended that you use a Keycloak Admin Client, such as [this one for Javascript](https://github.com/keycloak/keycloak-nodejs-admin-client), as they take care of authentication, getting an access token, and refreshing it when it expires.  #### Client credentials grant example ``` POST /auth/realms/test-realm/protocol/openid-connect/token Host: app.phasetwo.io Accept: application/json Content-type: application/x-www-form-urlencoded  grant_type=client_credentials&client_id=admin-cli&client_secret=fd649804-3a74-4d69-acaa-8f065c6b7da1 ```  #### Password grant example ``` POST /auth/realms/test-realm/protocol/openid-connect/token Host: app.phasetwo.io Accept: application/json Content-type: application/x-www-form-urlencoded  grant_type=password&username=uname@foo.com&password=pwd123AZY&client_id=admin-cli ```  ### SDKs Modern API libraries are available for several common languages. These are available as open source at the links below, or you can choose to generate your own using our [OpenAPI spec file](https://raw.githubusercontent.com/p2-inc/phasetwo-docs/main/openapi.yaml).  | Language | Library | | --- | --- | | Java (and other JVM langs) | https://github.com/p2-inc/phasetwo-java | | JavaScript/TypeScript | https://github.com/p2-inc/phasetwo-js | | Python | https://github.com/p2-inc/phasetwo-python |   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from phasetwo import schemas  # noqa: F401


class IdentityProviderRepresentation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            addReadTokenRoleOnCreate = schemas.BoolSchema
            alias = schemas.StrSchema
            
            
            class config(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'config':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            displayName = schemas.StrSchema
            enabled = schemas.BoolSchema
            firstBrokerLoginFlowAlias = schemas.StrSchema
            internalId = schemas.StrSchema
            linkOnly = schemas.BoolSchema
            postBrokerLoginFlowAlias = schemas.StrSchema
            providerId = schemas.StrSchema
            storeToken = schemas.BoolSchema
            trustEmail = schemas.BoolSchema
            __annotations__ = {
                "addReadTokenRoleOnCreate": addReadTokenRoleOnCreate,
                "alias": alias,
                "config": config,
                "displayName": displayName,
                "enabled": enabled,
                "firstBrokerLoginFlowAlias": firstBrokerLoginFlowAlias,
                "internalId": internalId,
                "linkOnly": linkOnly,
                "postBrokerLoginFlowAlias": postBrokerLoginFlowAlias,
                "providerId": providerId,
                "storeToken": storeToken,
                "trustEmail": trustEmail,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addReadTokenRoleOnCreate"]) -> MetaOapg.properties.addReadTokenRoleOnCreate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstBrokerLoginFlowAlias"]) -> MetaOapg.properties.firstBrokerLoginFlowAlias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalId"]) -> MetaOapg.properties.internalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkOnly"]) -> MetaOapg.properties.linkOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postBrokerLoginFlowAlias"]) -> MetaOapg.properties.postBrokerLoginFlowAlias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerId"]) -> MetaOapg.properties.providerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storeToken"]) -> MetaOapg.properties.storeToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustEmail"]) -> MetaOapg.properties.trustEmail: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addReadTokenRoleOnCreate", "alias", "config", "displayName", "enabled", "firstBrokerLoginFlowAlias", "internalId", "linkOnly", "postBrokerLoginFlowAlias", "providerId", "storeToken", "trustEmail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addReadTokenRoleOnCreate"]) -> typing.Union[MetaOapg.properties.addReadTokenRoleOnCreate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstBrokerLoginFlowAlias"]) -> typing.Union[MetaOapg.properties.firstBrokerLoginFlowAlias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalId"]) -> typing.Union[MetaOapg.properties.internalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkOnly"]) -> typing.Union[MetaOapg.properties.linkOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postBrokerLoginFlowAlias"]) -> typing.Union[MetaOapg.properties.postBrokerLoginFlowAlias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerId"]) -> typing.Union[MetaOapg.properties.providerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storeToken"]) -> typing.Union[MetaOapg.properties.storeToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustEmail"]) -> typing.Union[MetaOapg.properties.trustEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addReadTokenRoleOnCreate", "alias", "config", "displayName", "enabled", "firstBrokerLoginFlowAlias", "internalId", "linkOnly", "postBrokerLoginFlowAlias", "providerId", "storeToken", "trustEmail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        addReadTokenRoleOnCreate: typing.Union[MetaOapg.properties.addReadTokenRoleOnCreate, bool, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        firstBrokerLoginFlowAlias: typing.Union[MetaOapg.properties.firstBrokerLoginFlowAlias, str, schemas.Unset] = schemas.unset,
        internalId: typing.Union[MetaOapg.properties.internalId, str, schemas.Unset] = schemas.unset,
        linkOnly: typing.Union[MetaOapg.properties.linkOnly, bool, schemas.Unset] = schemas.unset,
        postBrokerLoginFlowAlias: typing.Union[MetaOapg.properties.postBrokerLoginFlowAlias, str, schemas.Unset] = schemas.unset,
        providerId: typing.Union[MetaOapg.properties.providerId, str, schemas.Unset] = schemas.unset,
        storeToken: typing.Union[MetaOapg.properties.storeToken, bool, schemas.Unset] = schemas.unset,
        trustEmail: typing.Union[MetaOapg.properties.trustEmail, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IdentityProviderRepresentation':
        return super().__new__(
            cls,
            *_args,
            addReadTokenRoleOnCreate=addReadTokenRoleOnCreate,
            alias=alias,
            config=config,
            displayName=displayName,
            enabled=enabled,
            firstBrokerLoginFlowAlias=firstBrokerLoginFlowAlias,
            internalId=internalId,
            linkOnly=linkOnly,
            postBrokerLoginFlowAlias=postBrokerLoginFlowAlias,
            providerId=providerId,
            storeToken=storeToken,
            trustEmail=trustEmail,
            _configuration=_configuration,
            **kwargs,
        )
